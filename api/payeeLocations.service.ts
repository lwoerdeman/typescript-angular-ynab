/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorResponse } from '../model/errorResponse';
import { PayeeLocationResponse } from '../model/payeeLocationResponse';
import { PayeeLocationsResponse } from '../model/payeeLocationsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class PayeeLocationsService {

    protected basePath = 'https://api.youneedabudget.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Single payee location
     * Returns a single payee location
     * @param budgetId The id of the budget (\&quot;last-used\&quot; can also be used to specify the last used budget)
     * @param payeeLocationId id of payee location
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPayeeLocationById(budgetId: string, payeeLocationId: string, observe?: 'body', reportProgress?: boolean): Observable<PayeeLocationResponse>;
    public getPayeeLocationById(budgetId: string, payeeLocationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayeeLocationResponse>>;
    public getPayeeLocationById(budgetId: string, payeeLocationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayeeLocationResponse>>;
    public getPayeeLocationById(budgetId: string, payeeLocationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (budgetId === null || budgetId === undefined) {
            throw new Error('Required parameter budgetId was null or undefined when calling getPayeeLocationById.');
        }
        if (payeeLocationId === null || payeeLocationId === undefined) {
            throw new Error('Required parameter payeeLocationId was null or undefined when calling getPayeeLocationById.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PayeeLocationResponse>(`${this.configuration.basePath}/budgets/${encodeURIComponent(String(budgetId))}/payee_locations/${encodeURIComponent(String(payeeLocationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List payee locations
     * Returns all payee locations
     * @param budgetId The id of the budget (\&quot;last-used\&quot; can also be used to specify the last used budget)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPayeeLocations(budgetId: string, observe?: 'body', reportProgress?: boolean): Observable<PayeeLocationsResponse>;
    public getPayeeLocations(budgetId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayeeLocationsResponse>>;
    public getPayeeLocations(budgetId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayeeLocationsResponse>>;
    public getPayeeLocations(budgetId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (budgetId === null || budgetId === undefined) {
            throw new Error('Required parameter budgetId was null or undefined when calling getPayeeLocations.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PayeeLocationsResponse>(`${this.configuration.basePath}/budgets/${encodeURIComponent(String(budgetId))}/payee_locations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List locations for a payee
     * Returns all payee locations for the specified payee
     * @param budgetId The id of the budget (\&quot;last-used\&quot; can also be used to specify the last used budget)
     * @param payeeId id of payee
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPayeeLocationsByPayee(budgetId: string, payeeId: string, observe?: 'body', reportProgress?: boolean): Observable<PayeeLocationsResponse>;
    public getPayeeLocationsByPayee(budgetId: string, payeeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayeeLocationsResponse>>;
    public getPayeeLocationsByPayee(budgetId: string, payeeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayeeLocationsResponse>>;
    public getPayeeLocationsByPayee(budgetId: string, payeeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (budgetId === null || budgetId === undefined) {
            throw new Error('Required parameter budgetId was null or undefined when calling getPayeeLocationsByPayee.');
        }
        if (payeeId === null || payeeId === undefined) {
            throw new Error('Required parameter payeeId was null or undefined when calling getPayeeLocationsByPayee.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PayeeLocationsResponse>(`${this.configuration.basePath}/budgets/${encodeURIComponent(String(budgetId))}/payees/${encodeURIComponent(String(payeeId))}/payee_locations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
