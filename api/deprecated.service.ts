/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BulkResponse } from '../model/bulkResponse';
import { BulkTransactions } from '../model/bulkTransactions';
import { ErrorResponse } from '../model/errorResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class DeprecatedService {

    protected basePath = 'https://api.youneedabudget.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Bulk create transactions
     * Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use \&#39;POST /budgets/{budget_id}/transactions\&#39; to create multiple transactions.
     * @param budgetId The id of the budget (\&quot;last-used\&quot; can also be used to specify the last used budget)
     * @param transactions The list of transactions to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bulkCreateTransactions(budgetId: string, transactions: BulkTransactions, observe?: 'body', reportProgress?: boolean): Observable<BulkResponse>;
    public bulkCreateTransactions(budgetId: string, transactions: BulkTransactions, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkResponse>>;
    public bulkCreateTransactions(budgetId: string, transactions: BulkTransactions, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkResponse>>;
    public bulkCreateTransactions(budgetId: string, transactions: BulkTransactions, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (budgetId === null || budgetId === undefined) {
            throw new Error('Required parameter budgetId was null or undefined when calling bulkCreateTransactions.');
        }
        if (transactions === null || transactions === undefined) {
            throw new Error('Required parameter transactions was null or undefined when calling bulkCreateTransactions.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BulkResponse>(`${this.configuration.basePath}/budgets/${encodeURIComponent(String(budgetId))}/transactions/bulk`,
            transactions,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
