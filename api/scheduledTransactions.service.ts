/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorResponse } from '../model/errorResponse';
import { ScheduledTransactionResponse } from '../model/scheduledTransactionResponse';
import { ScheduledTransactionsResponse } from '../model/scheduledTransactionsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ScheduledTransactionsService {

    protected basePath = 'https://api.youneedabudget.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Single scheduled transaction
     * Returns a single scheduled transaction
     * @param budgetId The id of the budget (\&quot;last-used\&quot; can also be used to specify the last used budget)
     * @param scheduledTransactionId The id of the scheduled transaction
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getScheduledTransactionById(budgetId: string, scheduledTransactionId: string, observe?: 'body', reportProgress?: boolean): Observable<ScheduledTransactionResponse>;
    public getScheduledTransactionById(budgetId: string, scheduledTransactionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduledTransactionResponse>>;
    public getScheduledTransactionById(budgetId: string, scheduledTransactionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduledTransactionResponse>>;
    public getScheduledTransactionById(budgetId: string, scheduledTransactionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (budgetId === null || budgetId === undefined) {
            throw new Error('Required parameter budgetId was null or undefined when calling getScheduledTransactionById.');
        }
        if (scheduledTransactionId === null || scheduledTransactionId === undefined) {
            throw new Error('Required parameter scheduledTransactionId was null or undefined when calling getScheduledTransactionById.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ScheduledTransactionResponse>(`${this.configuration.basePath}/budgets/${encodeURIComponent(String(budgetId))}/scheduled_transactions/${encodeURIComponent(String(scheduledTransactionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List scheduled transactions
     * Returns all scheduled transactions
     * @param budgetId The id of the budget (\&quot;last-used\&quot; can also be used to specify the last used budget)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getScheduledTransactions(budgetId: string, observe?: 'body', reportProgress?: boolean): Observable<ScheduledTransactionsResponse>;
    public getScheduledTransactions(budgetId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduledTransactionsResponse>>;
    public getScheduledTransactions(budgetId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduledTransactionsResponse>>;
    public getScheduledTransactions(budgetId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (budgetId === null || budgetId === undefined) {
            throw new Error('Required parameter budgetId was null or undefined when calling getScheduledTransactions.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ScheduledTransactionsResponse>(`${this.configuration.basePath}/budgets/${encodeURIComponent(String(budgetId))}/scheduled_transactions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
