/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface SaveTransaction { 
    accountId: string;
    date: string;
    /**
     * The transaction amount in milliunits format
     */
    amount: number;
    /**
     * The payee for the transaction
     */
    payeeId?: string;
    /**
     * The payee name.  If a payee_name value is provided and payee_id has a null value, the payee_name value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified) or (2) a payee with the same name or (3) creation of a new payee.
     */
    payeeName?: string;
    /**
     * The category for the transaction.  Split and Credit Card Payment categories are not permitted and will be ignored if supplied.  If an existing transaction has a Split category it cannot be changed.
     */
    categoryId?: string;
    memo?: string;
    /**
     * The cleared status of the transaction
     */
    cleared?: SaveTransaction.ClearedEnum;
    /**
     * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
     */
    approved?: boolean;
    /**
     * The transaction flag
     */
    flagColor?: SaveTransaction.FlagColorEnum;
    /**
     * If specified, the new transaction will be assigned this import_id and considered \"imported\". *At the time of import* we will attempt to match \"imported\" transactions with non-imported (i.e. \"user-entered\") transactions.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: \'YNAB:[milliunit_amount]:[iso_date]:[occurrence]\'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of \'YNAB:-294230:2015-12-30:1\'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be \'YNAB:-294230:2015-12-30:2\'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
     */
    importId?: string;
}
export namespace SaveTransaction {
    export type ClearedEnum = 'cleared' | 'uncleared' | 'reconciled';
    export const ClearedEnum = {
        Cleared: 'cleared' as ClearedEnum,
        Uncleared: 'uncleared' as ClearedEnum,
        Reconciled: 'reconciled' as ClearedEnum
    };
    export type FlagColorEnum = 'red' | 'orange' | 'yellow' | 'green' | 'blue' | 'purple';
    export const FlagColorEnum = {
        Red: 'red' as FlagColorEnum,
        Orange: 'orange' as FlagColorEnum,
        Yellow: 'yellow' as FlagColorEnum,
        Green: 'green' as FlagColorEnum,
        Blue: 'blue' as FlagColorEnum,
        Purple: 'purple' as FlagColorEnum
    };
}

